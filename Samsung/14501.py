# 퇴사 (다른 풀이 참고함)
# 상담을 적절히 했을 때, 백준이가 얻을 수 있는 최대 수익을 구하는 프로그램을 작성
# DP) Greedy아니고 DP야

# dp 배열에는 i번째 일까지 일했을 때 얻을 수 있는 최대 수익
# 예제 1에서, dp[3] = dp[0] + sche[0][1] = 10 이다.
# 즉 dp[3]은 마감이 3일 때, 즉 N = 3이라고 하면, 3번째 일 까지 하고 얻을 수 잇는 최대 수익을 의미함
# (3번째 일이란, i=2일 때의 일)

# 1. dp 배열 0으로 초기화 (N+1 크기의 배열) 
    # -> N=7 이면, 7번째 일까지 끝낸 후 최대 수익이기 때문에, dp[7]까지가 필요함 
# 2. 외부 for문 (i=0부터 N까지) -> 해당 일을 할 경우, 다음 일 들을 고려
# 3. 내부 for문 (j=i+sche[i][0], N+1까지) -> 할 수 있는 다음일의 최대 수익(dp[j])과 비교후,
    # i번째 일을 하는 것이 현재 보다 더 큰 수익인 경우, dp[j] = dp[i] + sche[i][1]로 대체

N = int(input())
sche = []
for _ in range(N) : sche.append(list(map(int, input().split())))

dp = [0] * (N+1)

for i in range(N) : # i번째 일을 할 경우
    for j in range(i+sche[i][0], N+1) :# 다음에 할 수 있는 일들 중
        if dp[j] < dp[i] + sche[i][1] : # i를 하는 게 더 최대 수익이라면, 
            dp[j] = dp[i] + sche[i][1] # 값 업데이트
            
print(dp[-1])