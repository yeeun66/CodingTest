# 1, 2, 3 더하기 3

# 정수 4를 1, 2, 3의 합으로 나타내는 방법은 총 7가지가 있다. 
# 합을 나타낼 때는 수를 1개 이상 사용해야 한다.
# 정수 n이 주어졌을 때, n을 1, 2, 3의 합으로 나타내는 방법의 수를 구하는 프로그램

# 정수 n이 주어졌을 때, (n <= 1000000)
# 각 테스트 케이스마다, n을 1, 2, 3의 합으로 나타내는 방법의 수를 1000000009로 나눈 나머지를 출력

# 방법: 
# 2차원 dp 배열 사용하여 dp[N] = [a, b, c] 이런식으로 사용하기
    # 이때, N은 표현하려는 정수이고 a b c 는 각각 마지막에 (1, 2, 3)을 더하는 경우
    # 따라서 dp[N]을 구한 후 안에 있는 값들의 sum을 출력 하면 됨

    # n = 1 ~ 3 까지는 초기화 하면 됨 (이 정도는 쉽게 갯수 셀 수 있음)
    # n = 4 부터는 dp 값에 의해 아래 식 유도 가능
        # dp[i][0] = dp[i-1][0] + dp[i-2][0] + dp[i-3][0]
        # dp[i][1] = dp[i-1][1] + dp[i-2][1] + dp[i-3][1]
        # dp[i][2] = dp[i-1][2] + dp[i-2][2] + dp[i-3][2]

# (시간초과, 메모리 초과 문제 해결 하기)
    # 1. 테스트 케이스 받을 때 마다 연산하게되면 불필요한 연산량이 늘어나므로, 처음에 다 계산 해놓고 TC 받을 때에 읽어오기만 하기
    # 2. 이 때 사실 자릿수 별로 따로 계산할 필요가 없음. 총합만 필요함 ==> 2차원 배열 쓸 필요가 없다!

import sys
input = sys.stdin.readline

dp = [0] * 1000001
dp[1] = 1
dp[2] = 2
dp[3] = 4
for i in range(4, 1000001) :
        dp[i] = (dp[i-1] + dp[i-2] + dp[i-3]) % 1000000009

T = int(input())

for _ in range(T) :
    n = int(input())
    print(dp[n])