# 1, 2, 3 더하기 5 [2차원 배열을 사용한 DP]
# 정수 n이 주어졌을 때, n을 1, 2, 3의 합으로 나타내는 방법의 수를 구하는 프로그램을 작성하시오.

# 합을 나타낼 때는 수를 1개 이상 사용해야 한다. 
# 단, 같은 수를 두 번 이상 연속해서 사용하면 안 된다.
# n은 양수이며 100,000보다 작거나 같다.
# 방법의 수를 1,000,000,009로 나눈 나머지를 출력

# 알고리즘!!
    # N이 6일 때를 예를 들어보면, 6은 3+3, 4+2, 5+1 이 가능함
    # 즉 뒤에 더한 수가 더할 수 있는 1,2,3 이라는 숫자고, 
    # 앞에 더한 수가 현재 N(=6) 보다 작은 수.
    # 따라서 2차원 배열을 정의해서
    # 행에는 N까지의 번호가, 열에는 N의 방법의 수가 1로 끝나는 경우, 2로 끝나는, 3으로 끝나는 경우를 저장해 놓는다.
    # 최종적으로 N의 배열에 들어있는 3개의 숫자의 합이 정답이 됨. 
    # 같은 수를 두 번 이상 연속해서 사용하면 안되는 점도 고려!

import sys
input = sys.stdin.readline

T = int(input())

dp = [[0 for _ in range(3)] for _ in range(100001)]
dp[1] = [1, 0, 0]
dp[2] = [0, 1, 0]
dp[3] = [1, 1, 1]

for i in range(4, 100001) :
    dp[i][0] = (dp[i-1][1] +  dp[i-1][2]) % 1000000009 # 5+1 경우 근데 이제 끝 값이 1인 것 제외
    dp[i][1] = (dp[i-2][0] +  dp[i-2][2]) % 1000000009 # 4+2 경우 근데 이제 2인 것 제외
    dp[i][2] = (dp[i-3][0] +  dp[i-3][1]) % 1000000009 # 3+3 경우 근데 이제 3인 것 제외

for _ in range(T) :
    N = int(input())
    print(sum(dp[N])% 1000000009) # 이거 왜 한번 더 마드 해야 통과되는진 모르겠따 .. 