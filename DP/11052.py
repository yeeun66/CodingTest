# 카드 팩의 가격이 주어졌을 때, N개의 카드를 구매하기 위해 민규가 지불해야 하는 금액의 최댓값을 구하는 프로그램을 작성하시오

# 카드의 개수가 적은 팩이더라도 가격이 비싸면 높은 등급의 카드가 많이 들어있을 것이라는 미신을 믿고 있다. 
# 따라서, 민규는 돈을 최대한 많이 지불해서 카드 N개 구매하려고 한다. 카드가 i개 포함된 카드팩의 가격은 Pi원이다.

# 15990과 비슷한 알고리즘. 근데 이제 pi 의 값(가격)으로 사용

# 내일 맨정신으로 다시....
import sys
input = sys.stdin.readline

N = int(input())
# dp = [0 for _ in range(N+1)]
dp = [[0 for _ in range(3)] for _ in range(N+1)]

dp[1] = [1, 0, 0]
dp[2] = [0, 1, 0]
dp[3] = [1, 1, 1]
for i in range(1, N+1) :
    x = input().split()
    if i == 1 : dp[1] = [x, 0, 0]
    elif i == 2 :
        if sum(dp[1]) > x :
            dp[2][0] = 2 * dp[1][0]
        else : dp[2] = [0, x, 0]
    elif i == 3 :
        if sum(dp[2]) > x :
            dp[2] = dp[1] * 2
        else : dp[2] = [0, x, 0]
    else :
        dp[i][0] = (dp[i-1][1] +  dp[i-1][2]) % 1000000009 # 5+1 경우 근데 이제 끝 값이 1인 것 제외
        dp[i][1] = (dp[i-2][0] +  dp[i-2][2]) % 1000000009 # 4+2 경우 근데 이제 2인 것 제외
        dp[i][2] = (dp[i-3][0] +  dp[i-3][1]) % 1000000009 # 3+3 경우 근데 이제 3인 것 제외
