# 제곱수의 합
# 자연수 N을 이렇게 제곱수들의 합으로 표현할 때에 그 항의 최소 개수를 구하는 프로그램을 작성
# Ex) 11 = 3^2 + 1^2 + 1^2 (3개의 항, 이게 최소)
# 11 = 2^2 + 2^2 + 1^1 + 1^1 + 1^1 (5개의 항, 이것도 가능하지만 최소항은 아님)

# 방법 => 이거 아님 함정에 빠짐
# N이 주어졌을 때
# 루트N을 정수로 바꾼다 (예를들어 37 => 6)
# N = 0이 될 때 까지 다음을 반복
    # 해당 수(루트N)의 제곱 부터 N에서 뺀다
    # 이제 바뀐 N에서 다시 루트N을 실시한다
    # 그리고 또 뺀다
    # 반복문 돌 때마다 카운트 한다

# 새로운 풀이법 (DP) ~~ 정답 ~~
# 초기 dp[1] = 1
# 우선 N까지 다음을 반복하며 dp 배열에 해당하는 숫자를 채운다 (들어갈 값은 식의 갯수)
    # 이때, 자신의 제곱근 이하의 제곱수들을 마련한다
    # 이후 그 제곱수들을 j라 할 때, dp[j^2] + dp[i-j^2] 의 갯수의 최소값을 구한다
    # 근데 이제 제곱수들은 따로 처리 (제곱수면 1개로 가능이니까)

import sys
input = sys.stdin.readline

N = int(input())

dp = [0] * (N+1)
dp[1] = 1

for i in range(2, N+1) :
    a = int(i**0.5)
    if i == a ** 2 : 
        dp[i] = 1
        continue
    minn = i+1
    for j in range(1, a+1) :
        tmp = dp[j**2] + dp[i-j**2]
        if minn > tmp : minn = tmp
    dp[i] = minn

print(dp[N])